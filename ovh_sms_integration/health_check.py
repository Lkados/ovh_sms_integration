# -*- coding: utf-8 -*-
"""
Script de v√©rification de sant√© du syst√®me OVH SMS Integration
V√©rifie que tous les composants fonctionnent correctement
"""

from __future__ import unicode_literals
import frappe
from frappe import _
from datetime import datetime, timedelta
import json

def run_health_check():
	"""Ex√©cute une v√©rification compl√®te du syst√®me"""
	print("üîç V√©rification de sant√© - OVH SMS Integration")
	print("=" * 60)
	
	health_report = {
		"timestamp": datetime.now().isoformat(),
		"overall_status": "healthy",
		"checks": [],
		"warnings": [],
		"errors": []
	}
	
	try:
		# 1. V√©rification des DocTypes
		check_doctypes(health_report)
		
		# 2. V√©rification des param√®tres OVH
		check_ovh_settings(health_report)
		
		# 3. V√©rification des rappels d'√©v√©nements
		check_event_reminders(health_report)
		
		# 4. V√©rification du scheduler
		check_scheduler(health_report)
		
		# 5. V√©rification des permissions
		check_permissions(health_report)
		
		# 6. V√©rification des t√¢ches r√©centes
		check_recent_activity(health_report)
		
		# 7. V√©rification de la base de donn√©es
		check_database_health(health_report)
		
	except Exception as e:
		health_report["errors"].append(f"Erreur g√©n√©rale lors de la v√©rification: {str(e)}")
		health_report["overall_status"] = "error"
	
	# D√©termination du statut global
	if health_report["errors"]:
		health_report["overall_status"] = "error"
	elif health_report["warnings"]:
		health_report["overall_status"] = "warning"
	
	# Affichage du rapport
	display_health_report(health_report)
	
	return health_report

def check_doctypes(health_report):
	"""V√©rifie que tous les DocTypes n√©cessaires existent"""
	print("\nüìã V√©rification des DocTypes...")
	
	required_doctypes = [
		"OVH SMS Settings",
		"SMS Event Reminder"
	]
	
	for doctype in required_doctypes:
		try:
			if frappe.db.exists("DocType", doctype):
				health_report["checks"].append(f"‚úÖ DocType {doctype} existe")
				print(f"  ‚úÖ {doctype}")
			else:
				error_msg = f"‚ùå DocType {doctype} manquant"
				health_report["errors"].append(error_msg)
				print(f"  {error_msg}")
		except Exception as e:
			error_msg = f"‚ùå Erreur v√©rification {doctype}: {str(e)}"
			health_report["errors"].append(error_msg)
			print(f"  {error_msg}")

def check_ovh_settings(health_report):
	"""V√©rifie la configuration OVH SMS"""
	print("\nüîß V√©rification des param√®tres OVH...")
	
	try:
		settings = frappe.get_single('OVH SMS Settings')
		
		# V√©rification activation
		if settings.enabled:
			health_report["checks"].append("‚úÖ OVH SMS activ√©")
			print("  ‚úÖ OVH SMS activ√©")
		else:
			warning_msg = "‚ö†Ô∏è OVH SMS d√©sactiv√©"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
			return
		
		# V√©rification des champs obligatoires
		required_fields = ["application_key", "application_secret", "consumer_key"]
		for field in required_fields:
			if field == "application_secret" or field == "consumer_key":
				value = settings.get_password(field)
			else:
				value = getattr(settings, field, None)
			
			if value:
				health_report["checks"].append(f"‚úÖ {field} configur√©")
				print(f"  ‚úÖ {field} configur√©")
			else:
				error_msg = f"‚ùå {field} manquant"
				health_report["errors"].append(error_msg)
				print(f"  {error_msg}")
		
		# Test de connexion
		print("  üì° Test de connexion OVH...")
		connection_result = settings.test_connection()
		if connection_result.get("success"):
			health_report["checks"].append("‚úÖ Connexion OVH r√©ussie")
			print("    ‚úÖ Connexion r√©ussie")
		else:
			error_msg = f"‚ùå Connexion OVH √©chou√©e: {connection_result.get('message')}"
			health_report["errors"].append(error_msg)
			print(f"    {error_msg}")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification OVH: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def check_event_reminders(health_report):
	"""V√©rifie la configuration des rappels d'√©v√©nements"""
	print("\n‚è∞ V√©rification des rappels d'√©v√©nements...")
	
	try:
		reminder_settings = frappe.get_single('SMS Event Reminder')
		
		# V√©rification activation
		if reminder_settings.enabled:
			health_report["checks"].append("‚úÖ Rappels d'√©v√©nements activ√©s")
			print("  ‚úÖ Rappels activ√©s")
		else:
			warning_msg = "‚ö†Ô∏è Rappels d'√©v√©nements d√©sactiv√©s"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
			return
		
		# V√©rification filtre √©v√©nements
		if reminder_settings.event_type_filter:
			health_report["checks"].append(f"‚úÖ Filtre √©v√©nements: '{reminder_settings.event_type_filter}'")
			print(f"  ‚úÖ Filtre: '{reminder_settings.event_type_filter}'")
		else:
			warning_msg = "‚ö†Ô∏è Aucun filtre d'√©v√©nements configur√©"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
		
		# V√©rification templates
		if reminder_settings.reminder_message_template:
			health_report["checks"].append("‚úÖ Template de message configur√©")
			print("  ‚úÖ Template configur√©")
		else:
			warning_msg = "‚ö†Ô∏è Aucun template de message configur√©"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
		
		# V√©rification √©v√©nements √©ligibles
		events_count = get_eligible_events_count(reminder_settings.event_type_filter)
		if events_count > 0:
			health_report["checks"].append(f"‚úÖ {events_count} √©v√©nements √©ligibles trouv√©s")
			print(f"  ‚úÖ {events_count} √©v√©nements √©ligibles")
		else:
			warning_msg = "‚ö†Ô∏è Aucun √©v√©nement √©ligible trouv√©"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification rappels: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def check_scheduler(health_report):
	"""V√©rifie que le scheduler fonctionne"""
	print("\n‚öôÔ∏è V√©rification du scheduler...")
	
	try:
		# V√©rification du statut du scheduler
		scheduler_enabled = not frappe.conf.get("pause_scheduler", False)
		
		if scheduler_enabled:
			health_report["checks"].append("‚úÖ Scheduler activ√©")
			print("  ‚úÖ Scheduler activ√©")
		else:
			error_msg = "‚ùå Scheduler d√©sactiv√©"
			health_report["errors"].append(error_msg)
			print(f"  {error_msg}")
		
		# V√©rification des t√¢ches configur√©es
		required_tasks = [
			"ovh_sms_integration.ovh_sms_integration.doctype.sms_event_reminder.sms_event_reminder.process_event_reminders",
			"ovh_sms_integration.tasks.check_event_reminders_hourly",
			"ovh_sms_integration.tasks.reset_daily_counters"
		]
		
		for task in required_tasks:
			try:
				# Tentative d'importation de la fonction
				module_path, function_name = task.rsplit('.', 1)
				module = frappe.get_module(module_path)
				if hasattr(module, function_name):
					health_report["checks"].append(f"‚úÖ T√¢che {function_name} disponible")
					print(f"  ‚úÖ {function_name}")
				else:
					warning_msg = f"‚ö†Ô∏è Fonction {function_name} introuvable"
					health_report["warnings"].append(warning_msg)
					print(f"  {warning_msg}")
			except Exception as e:
				warning_msg = f"‚ö†Ô∏è Erreur importation {task}: {str(e)}"
				health_report["warnings"].append(warning_msg)
				print(f"  {warning_msg}")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification scheduler: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def check_permissions(health_report):
	"""V√©rifie les permissions des r√¥les"""
	print("\nüîí V√©rification des permissions...")
	
	try:
		required_roles = ["SMS Manager", "SMS User"]
		
		for role in required_roles:
			if frappe.db.exists("Role", role):
				health_report["checks"].append(f"‚úÖ R√¥le {role} existe")
				print(f"  ‚úÖ R√¥le {role}")
			else:
				warning_msg = f"‚ö†Ô∏è R√¥le {role} manquant"
				health_report["warnings"].append(warning_msg)
				print(f"  {warning_msg}")
		
		# V√©rification permissions DocTypes
		doctypes_to_check = ["OVH SMS Settings", "SMS Event Reminder"]
		for doctype in doctypes_to_check:
			perms = frappe.db.count("DocPerm", {"parent": doctype})
			if perms > 0:
				health_report["checks"].append(f"‚úÖ Permissions {doctype}: {perms}")
				print(f"  ‚úÖ {doctype}: {perms} permissions")
			else:
				warning_msg = f"‚ö†Ô∏è Aucune permission pour {doctype}"
				health_report["warnings"].append(warning_msg)
				print(f"  {warning_msg}")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification permissions: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def check_recent_activity(health_report):
	"""V√©rifie l'activit√© r√©cente du syst√®me"""
	print("\nüìä V√©rification de l'activit√© r√©cente...")
	
	try:
		# V√©rification des derniers rappels
		reminder_settings = frappe.get_single('SMS Event Reminder')
		
		if reminder_settings.last_reminder_sent:
			last_sent = reminder_settings.last_reminder_sent
			hours_ago = (datetime.now() - last_sent).total_seconds() / 3600
			
			if hours_ago < 24:
				health_report["checks"].append(f"‚úÖ Dernier rappel: il y a {hours_ago:.1f}h")
				print(f"  ‚úÖ Dernier rappel: il y a {hours_ago:.1f}h")
			else:
				warning_msg = f"‚ö†Ô∏è Dernier rappel: il y a {hours_ago:.1f}h"
				health_report["warnings"].append(warning_msg)
				print(f"  {warning_msg}")
		else:
			warning_msg = "‚ö†Ô∏è Aucun rappel envoy√© r√©cemment"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
		
		# Statistiques
		total_sent = reminder_settings.total_reminders_sent or 0
		failed_count = reminder_settings.failed_reminders_count or 0
		
		health_report["checks"].append(f"‚úÖ Total rappels: {total_sent}")
		health_report["checks"].append(f"‚úÖ √âchecs: {failed_count}")
		print(f"  ‚úÖ Total rappels: {total_sent}")
		print(f"  ‚úÖ √âchecs: {failed_count}")
		
		# Taux d'√©chec
		if total_sent > 0:
			failure_rate = (failed_count / total_sent) * 100
			if failure_rate > 10:
				warning_msg = f"‚ö†Ô∏è Taux d'√©chec √©lev√©: {failure_rate:.1f}%"
				health_report["warnings"].append(warning_msg)
				print(f"  {warning_msg}")
			else:
				health_report["checks"].append(f"‚úÖ Taux d'√©chec: {failure_rate:.1f}%")
				print(f"  ‚úÖ Taux d'√©chec: {failure_rate:.1f}%")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification activit√©: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def check_database_health(health_report):
	"""V√©rifie la sant√© de la base de donn√©es"""
	print("\nüóÑÔ∏è V√©rification de la base de donn√©es...")
	
	try:
		# V√©rification des tables principales
		required_tables = ["tabOVH SMS Settings", "tabSMS Event Reminder", "tabEvent"]
		
		for table in required_tables:
			try:
				count = frappe.db.sql(f"SELECT COUNT(*) FROM `{table}` LIMIT 1")[0][0]
				health_report["checks"].append(f"‚úÖ Table {table} accessible")
				print(f"  ‚úÖ {table}")
			except Exception as e:
				error_msg = f"‚ùå Table {table} inaccessible: {str(e)}"
				health_report["errors"].append(error_msg)
				print(f"  {error_msg}")
		
		# V√©rification des index
		try:
			# V√©rifier l'index sur les √©v√©nements
			frappe.db.sql("SHOW INDEX FROM `tabEvent` WHERE Key_name = 'starts_on'")
			health_report["checks"].append("‚úÖ Index base de donn√©es OK")
			print("  ‚úÖ Index OK")
		except Exception as e:
			warning_msg = f"‚ö†Ô∏è Probl√®me index: {str(e)}"
			health_report["warnings"].append(warning_msg)
			print(f"  {warning_msg}")
		
	except Exception as e:
		error_msg = f"‚ùå Erreur v√©rification base de donn√©es: {str(e)}"
		health_report["errors"].append(error_msg)
		print(f"  {error_msg}")

def get_eligible_events_count(event_filter):
	"""Compte les √©v√©nements √©ligibles aux rappels"""
	try:
		if not event_filter:
			return 0
		
		future_date = datetime.now() + timedelta(days=30)
		
		count = frappe.db.count("Event", {
			"subject": ["like", f"%{event_filter}%"],
			"starts_on": [">", datetime.now()],
			"starts_on": ["<", future_date],
			"docstatus": 1
		})
		
		return count
	except Exception:
		return 0

def display_health_report(health_report):
	"""Affiche le rapport de sant√© final"""
	print("\n" + "=" * 60)
	print("üìã RAPPORT DE SANT√â FINAL")
	print("=" * 60)
	
	# Statut global
	status_icon = {
		"healthy": "‚úÖ",
		"warning": "‚ö†Ô∏è",
		"error": "‚ùå"
	}
	
	status = health_report["overall_status"]
	print(f"\nüè• Statut global: {status_icon[status]} {status.upper()}")
	
	# R√©sum√©
	checks_count = len(health_report["checks"])
	warnings_count = len(health_report["warnings"])
	errors_count = len(health_report["errors"])
	
	print(f"\nüìä R√©sum√©:")
	print(f"  ‚úÖ V√©rifications r√©ussies: {checks_count}")
	print(f"  ‚ö†Ô∏è Avertissements: {warnings_count}")
	print(f"  ‚ùå Erreurs: {errors_count}")
	
	# D√©tails des avertissements
	if health_report["warnings"]:
		print(f"\n‚ö†Ô∏è Avertissements:")
		for warning in health_report["warnings"]:
			print(f"  - {warning}")
	
	# D√©tails des erreurs
	if health_report["errors"]:
		print(f"\n‚ùå Erreurs:")
		for error in health_report["errors"]:
			print(f"  - {error}")
	
	# Recommandations
	print(f"\nüí° Recommandations:")
	if errors_count > 0:
		print("  - Corrigez les erreurs avant de continuer")
		print("  - V√©rifiez la configuration OVH SMS")
		print("  - Consultez les logs pour plus de d√©tails")
	elif warnings_count > 0:
		print("  - Examinez les avertissements")
		print("  - Optimisez la configuration si n√©cessaire")
	else:
		print("  - Syst√®me en bonne sant√© !")
		print("  - Continuez √† surveiller les statistiques")
	
	print(f"\nüïí V√©rification termin√©e: {health_report['timestamp']}")
	print("=" * 60)

def save_health_report(health_report, filename=None):
	"""Sauvegarde le rapport de sant√©"""
	if not filename:
		timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
		filename = f"sms_health_report_{timestamp}.json"
	
	try:
		with open(filename, 'w', encoding='utf-8') as f:
			json.dump(health_report, f, indent=2, ensure_ascii=False, default=str)
		
		print(f"\nüíæ Rapport sauvegard√©: {filename}")
		return filename
	except Exception as e:
		print(f"\n‚ùå Erreur sauvegarde rapport: {e}")
		return None

@frappe.whitelist()
def run_health_check_api():
	"""API pour ex√©cuter la v√©rification de sant√©"""
	try:
		health_report = run_health_check()
		return health_report
	except Exception as e:
		frappe.log_error(f"Erreur health check API: {e}")
		return {
			"overall_status": "error",
			"errors": [str(e)],
			"timestamp": datetime.now().isoformat()
		}

if __name__ == "__main__":
	# Ex√©cution en mode standalone
	try:
		frappe.init(site='test_site')
		frappe.connect()
		
		health_report = run_health_check()
		
		# Sauvegarde optionnelle
		save_health_report(health_report)
		
		frappe.destroy()
		
	except Exception as e:
		print(f"‚ùå Erreur critique: {e}")
		exit(1)